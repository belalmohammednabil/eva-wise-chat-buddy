import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Globe, Mic, MicOff, Volume2, VolumeX, Settings, RefreshCw, Copy, Download, ChevronDown, Stethoscope, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { EVA_COMPANY_DATA, CONVERSATION_DATABASE, CONVERSATION_PATTERNS } from '@/data/evaData';
import { GroqService, detectLanguage, detectTone } from '@/services/groqService';
import evaLogo from '@/assets/eva-logo-official.png';

interface Message {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
  language: 'ar' | 'en';
  tone?: 'formal' | 'informal';
  source?: 'eva' | 'groq';
  productRecommendations?: string[];
  medicalAdvice?: boolean;
}

interface ChatbotProps {
  apiKey?: string;
}

interface SkinAnalysis {
  skinType: string;
  problems: string[];
  recommendations: string[];
  routine: string[];
}

const EvaChatbot: React.FC<ChatbotProps> = ({ apiKey = 'demo-key' }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [language, setLanguage] = useState<'ar' | 'en'>('ar');
  const [detectedTone, setDetectedTone] = useState<'formal' | 'informal'>('informal');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [groqService] = useState(() => new GroqService(apiKey));
  const [conversationMode, setConversationMode] = useState<'smart' | 'eva-only' | 'ai-only'>('smart');
  const [skinAnalysis, setSkinAnalysis] = useState<SkinAnalysis | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const { toast } = useToast();

  // Initialize with welcome message
  useEffect(() => {
    const welcomeMessage: Message = {
      id: '1',
      content: language === 'ar' 
        ? 'ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØ ÿ•ŸäŸÅÿß ÿßŸÑÿ∞ŸÉŸä ŸÑŸÑÿ¨ŸÖÿßŸÑ ŸàÿßŸÑÿπŸÜÿßŸäÿ© üíÑ‚ú®\n\nÿ£ŸÜÿß ŸáŸÜÿß ÿπÿ¥ÿßŸÜ ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä:\nüå∏ ÿ™ÿ≠ŸÑŸäŸÑ ŸÜŸàÿπ ÿ®ÿ¥ÿ±ÿ™ŸÉ Ÿàÿ≠ŸÑ ŸÖÿ¥ÿßŸÉŸÑŸáÿß\nüíÖ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ© ÿπŸÑŸÖŸäÿßŸã\nüß¥ ÿ®ŸÜÿßÿ° ÿ±Ÿàÿ™ŸäŸÜ ÿπŸÜÿßŸäÿ© ŸÖÿ´ÿßŸÑŸä\nüë©‚Äç‚öïÔ∏è ŸÜÿµÿßÿ¶ÿ≠ ÿ∑ÿ®Ÿäÿ©-ÿ™ÿ¨ŸÖŸäŸÑŸäÿ© ÿ¢ŸÖŸÜÿ©\nüõçÔ∏è ÿ™ŸàÿµŸäÿßÿ™ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ•ŸäŸÅÿß ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ©\n\nÿßŸÉÿ™ÿ® ÿ£Ÿà ÿ≥ÿ¨ŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿµŸàÿ™Ÿäÿ© ÿπŸÜ ŸÖÿ¥ŸÉŸÑÿ™ŸÉÿå Ÿàÿ£ŸÜÿß Ÿáÿßÿ≠ŸÑŸÑŸÉ ÿßŸÑŸàÿ∂ÿπ Ÿàÿ£ÿØŸäŸÉ ÿßŸÑÿ≠ŸÑ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®! üòä'
        : 'Hello and welcome! I\'m Eva\'s smart beauty and care assistant üíÑ‚ú®\n\nI\'m here to help you with:\nüå∏ Analyzing your skin type and solving problems\nüíÖ Choosing scientifically suitable products\nüß¥ Building the perfect care routine\nüë©‚Äç‚öïÔ∏è Safe medical-cosmetic advice\nüõçÔ∏è Eva product recommendations\n\nWrite or record a voice message about your concern, and I\'ll analyze your situation and give you the right solution! üòä',
      isUser: false,
      timestamp: new Date(),
      language,
      tone: 'informal',
      source: 'eva'
    };
    setMessages([welcomeMessage]);
  }, []);

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Enhanced Eva data search with comprehensive matching - NO EMPTY RESPONSES
  const searchEvaData = (query: string, userLanguage: 'ar' | 'en'): string | null => {
    const lowerQuery = query.toLowerCase();
    const data = EVA_COMPANY_DATA;
    
    // First check the conversation database for exact or similar matches
    const matchingConversations = CONVERSATION_DATABASE.conversations.filter(conv => {
      const queryLower = conv.userQuery.toLowerCase();
      return queryLower.includes(lowerQuery) || lowerQuery.includes(queryLower) ||
             conv.userQuery.split(' ').some(word => lowerQuery.includes(word.toLowerCase()));
    });

    if (matchingConversations.length > 0) {
      // Sort by language match and return the best match
      const languageMatches = matchingConversations.filter(conv => conv.language === userLanguage);
      if (languageMatches.length > 0) {
        return languageMatches[0].botResponse;
      }
      return matchingConversations[0].botResponse;
    }

    const names = ['ÿ≠ÿ®Ÿäÿ®Ÿä', 'ÿµÿØŸäŸÇŸä', 'ÿ®ÿ∑ŸÑ', 'ŸÖÿ≠ÿ™ÿ±ŸÖ', 'ÿßÿ≥ÿ™ÿßÿ∞', 'Ÿäÿß ŸÅŸÜÿØŸÖ'];
    const englishNames = ['buddy', 'friend', 'dear', 'sir', 'mate'];

    // Enhanced greetings detection
    if (lowerQuery.includes('hello') || lowerQuery.includes('hi') || lowerQuery.includes('ÿ£ŸáŸÑÿß') ||
        lowerQuery.includes('ŸÖÿ±ÿ≠ÿ®ÿß') || lowerQuery.includes('ÿßŸÑÿ≥ŸÑÿßŸÖ') || lowerQuery.includes('ÿµÿ®ÿßÿ≠') ||
        lowerQuery.includes('ŸÖÿ≥ÿßÿ°') || lowerQuery.includes('ÿ•ÿ≤ŸäŸÉ') || lowerQuery.includes('ÿßÿ≤ŸäŸÉ') ||
        lowerQuery.includes('ÿßÿ≤ÿßŸä') || lowerQuery.includes('ÿπÿßŸÖŸÑ') || lowerQuery.includes('ÿßÿÆÿ®ÿßÿ±ŸÉ') ||
        lowerQuery.includes('ÿ£ÿ≤ŸäŸÉ') || lowerQuery.includes('ÿßŸäŸá ÿ£ÿÆÿ®ÿßÿ±ŸÉ') || lowerQuery.includes('ÿ•ŸäŸá ÿ£ÿÆÿ®ÿßÿ±ŸÉ') ||
        lowerQuery.includes('good morning') || lowerQuery.includes('good evening') || lowerQuery.includes('hey') ||
        lowerQuery.includes('what\'s up') || lowerQuery.includes('whats up')) {
      return userLanguage === 'ar'
        ? `ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ${names[Math.floor(Math.random() * names.length)]} üåü ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØ ÿ•ŸäŸÅÿß ÿßŸÑÿ∞ŸÉŸäÿå ŸáŸÜÿß ÿπŸÑÿ¥ÿßŸÜ ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä ŸÉŸÑ ÿßŸÑŸÑŸä ÿ™ÿ≠ÿ™ÿßÿ¨Ÿá!\n\nüöÄ ÿ£ŸÇÿØÿ± ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä:\n‚Ä¢ ŸÖÿπÿ±ŸÅÿ© ÿÆÿØŸÖÿßÿ™ŸÜÿß ŸàŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß ÿßŸÑŸÉÿßŸÖŸÑÿ©\n‚Ä¢ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± ŸàÿßŸÑÿπÿ±Ÿàÿ∂ ÿßŸÑÿ≠ÿßŸÑŸäÿ©\n‚Ä¢ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ŸàÿßŸÑÿ™ÿØÿ±Ÿäÿ®ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©\n‚Ä¢ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑŸÅÿ±ŸäŸÇ ŸàÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä\n‚Ä¢ ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿπŸÜÿßŸäÿ© ŸàÿßŸÑÿ¨ŸÖÿßŸÑ\n‚Ä¢ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ ÿ¨ŸàÿØÿ© Ÿàÿ¥ŸáÿßÿØÿßÿ™ ÿ•ŸäŸÅÿß\n\nüí¨ ŸÖŸÖŸÉŸÜ ÿ™ÿ≥ÿ£ŸÑŸÜŸä ÿπŸÜ ÿ£Ÿä ÿ≠ÿßÿ¨ÿ© ÿ™ÿÆÿµ ÿ•ŸäŸÅÿß ÿ£Ÿà ÿ£Ÿä ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ± ÿ™ŸÇŸÜŸä ÿπÿßŸÖ! ÿ•ÿ≤ÿßŸä ÿ£ŸÇÿØÿ± ÿ£ÿ≥ÿßÿπÿØŸÉ ÿßŸÑŸÜŸáÿßÿ±ÿØÿ©ÿü üòä`
        : `Hello there! ${englishNames[Math.floor(Math.random() * englishNames.length)]} üåü I'm Eva's intelligent assistant, here to help you with everything you need!\n\nüöÄ I can assist you with:\n‚Ä¢ Complete information about our services and products\n‚Ä¢ Current pricing and promotional offers\n‚Ä¢ Available projects and training details\n‚Ä¢ Team contact and technical support\n‚Ä¢ Beauty and care tips\n‚Ä¢ Information about Eva's quality and certifications\n\nüí¨ Feel free to ask me anything about Eva or any general technical questions! How can I help you today? üòä`;
    }
    
    // Company information - expanded
    if (lowerQuery.includes('company') || lowerQuery.includes('ÿ¥ÿ±ŸÉÿ©') || lowerQuery.includes('ÿ•ŸäŸÅÿß') || 
        lowerQuery.includes('eva') || lowerQuery.includes('about') || lowerQuery.includes('ÿπŸÜ') ||
        lowerQuery.includes('ÿ™ÿ£ÿ≥ÿ≥ÿ™') || lowerQuery.includes('founded') || lowerQuery.includes('history')) {
      return userLanguage === 'ar' 
        ? `üè¢ ÿ¥ÿ±ŸÉÿ© ÿ•ŸäŸÅÿß - ŸÇÿµÿ© ŸÜÿ¨ÿßÿ≠ ÿ™ŸÇŸÜŸäÿ© ŸÖŸÖŸäÿ≤ÿ©!\n\nüìÖ ÿ™ÿ£ÿ≥ÿ≥ÿ™: ${data.company.established}\nüìç ÿßŸÑŸÖŸÇÿ± ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä: ${data.company.headquarters}\nüè¢ ÿßŸÑŸÅÿ±Ÿàÿπ: ${data.company.branches.join(' ‚Ä¢ ')}\nüë• ŸÅÿ±ŸäŸÇ ÿßŸÑÿπŸÖŸÑ: ${data.company.employees}\nüí∞ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™: ${data.company.revenue}\nüìà ÿßŸÑŸÜŸÖŸà: ${data.company.growth}\n\nüèÜ ÿßŸÑÿ¨Ÿàÿßÿ¶ÿ≤:\n${data.company.awards.map(award => `‚Ä¢ ${award}`).join('\n')}\n\nüìú ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™:\n${data.company.certifications.join(' ‚Ä¢ ')}\n\n‚ú® ÿ±ÿ≥ÿßŸÑÿ™ŸÜÿß: ${data.company.mission}\nüéØ ÿ±ÿ§Ÿäÿ™ŸÜÿß: ${data.company.vision}\n\nüí° ŸÇŸäŸÖŸÜÿß ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©:\n${data.company.values.map(value => `‚Ä¢ ${value}`).join('\n')}\n\nÿ•ÿ≠ŸÜÿß ŸÖÿ¥ ŸÖÿ¨ÿ±ÿØ ÿ¥ÿ±ŸÉÿ© ÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿßÿå ÿ•ÿ≠ŸÜÿß ÿ¥ÿ±ŸÉÿßÿ° ŸÜÿ¨ÿßÿ≠ŸÉ ŸÅŸä ÿßŸÑÿπÿµÿ± ÿßŸÑÿ±ŸÇŸÖŸä! üöÄ`
        : `üè¢ Eva Company - A Distinguished Tech Success Story!\n\nüìÖ Established: ${data.company.established}\nüìç Headquarters: ${data.company.headquartersEn}\nüè¢ Branches: ${data.company.branchesEn.join(' ‚Ä¢ ')}\nüë• Team: ${data.company.employees}\nüí∞ Revenue: ${data.company.revenueEn}\nüìà Growth: ${data.company.growthEn}\n\nüèÜ Awards:\n${data.company.awardsEn.map(award => `‚Ä¢ ${award}`).join('\n')}\n\nüìú Certifications:\n${data.company.certifications.join(' ‚Ä¢ ')}\n\n‚ú® Our mission: ${data.company.missionEn}\nüéØ Our vision: ${data.company.visionEn}\n\nüí° Core values:\n${data.company.valuesEn.map(value => `‚Ä¢ ${value}`).join('\n')}\n\nWe're not just a tech company, we're your success partners in the digital age! üöÄ`;
    }

    // Services - comprehensive
    if (lowerQuery.includes('service') || lowerQuery.includes('ÿÆÿØŸÖÿ©') || lowerQuery.includes('ÿÆÿØŸÖÿßÿ™') || 
        lowerQuery.includes('development') || lowerQuery.includes('ÿ™ÿ∑ŸàŸäÿ±') || lowerQuery.includes('solutions') ||
        lowerQuery.includes('ÿ≠ŸÑŸàŸÑ') || lowerQuery.includes('products') || lowerQuery.includes('ŸÖŸÜÿ™ÿ¨ÿßÿ™')) {
      const services = Object.values(data.services);
      const servicesList = services.map((service, index) => 
        userLanguage === 'ar' 
          ? `${index + 1}. üíº ${service.name}:\n   üìù ${service.description}${'pricing' in service ? `\n   üí∞ ÿßŸÑÿ≥ÿπÿ±: ${service.pricing}` : ''}`
          : `${index + 1}. üíº ${service.nameEn}:\n   üìù ${service.descriptionEn}${'pricingEn' in service ? `\n   üí∞ Price: ${service.pricingEn}` : ''}`
      ).join('\n\n');
      
      return userLanguage === 'ar'
        ? `üöÄ ÿÆÿØŸÖÿßÿ™ŸÜÿß ÿßŸÑŸÖÿ™ŸÖŸäÿ≤ÿ© ŸàÿßŸÑÿ¥ÿßŸÖŸÑÿ©:\n\n${servicesList}\n\nüìä ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ŸÜÿß ÿßŸÑŸÖÿ¥ÿ±ŸëŸÅÿ©:\n‚Ä¢ ${data.statistics.projectsCompleted}\n‚Ä¢ ${data.statistics.successRate}\n‚Ä¢ ${data.statistics.clientSatisfaction}\n‚Ä¢ ŸàŸÇÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©: ${data.statistics.responseTime}\n\nüéØ ÿπÿßŸäÿ≤ ÿ™ÿπÿ±ŸÅ ÿ™ŸÅÿßÿµŸäŸÑ ÿ£ŸÉÿ™ÿ± ÿπŸÜ ÿÆÿØŸÖÿ© ŸÖÿπŸäŸÜÿ©ÿü ÿßÿ≥ÿ£ŸÑŸÜŸä ÿ®ÿ±ÿßÿ≠ÿ™ŸÉ! ÿ£Ÿà ŸÑŸà ŸÖÿ≠ÿ™ÿßÿ¨ ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ŸÖÿ¨ÿßŸÜŸäÿ©ÿå ÿ£ŸÜÿß ŸáŸÜÿß! üí™`
        : `üöÄ Our Distinguished and Comprehensive Services:\n\n${servicesList}\n\nüìä Our Outstanding Statistics:\n‚Ä¢ ${data.statistics.projectsCompletedEn}\n‚Ä¢ ${data.statistics.successRateEn}\n‚Ä¢ ${data.statistics.clientSatisfactionEn}\n‚Ä¢ Response time: ${data.statistics.responseTimeEn}\n\nüéØ Want to know more details about a specific service? Just ask! Or if you need a free consultation, I'm here! üí™`;
    }

    // Projects and case studies
    if (lowerQuery.includes('project') || lowerQuery.includes('ŸÖÿ¥ÿ±Ÿàÿπ') || lowerQuery.includes('ŸÖÿ¥ÿßÿ±Ÿäÿπ') ||
        lowerQuery.includes('portfolio') || lowerQuery.includes('case') || lowerQuery.includes('ÿØÿ±ÿßÿ≥ÿ© ÿ≠ÿßŸÑÿ©') ||
        lowerQuery.includes('examples') || lowerQuery.includes('ÿ£ŸÖÿ´ŸÑÿ©')) {
      const projects = Object.values(data.projects);
      const projectsList = projects.map((project, index) =>
        userLanguage === 'ar'
          ? `${index + 1}. üéØ ${project.name}:\n   üìã ${project.description}\n   ‚è∞ ÿßŸÑŸÖÿØÿ©: ${project.timeline}\n   üõ†Ô∏è ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™: ${project.technologies.join(', ')}\n   ‚ú® ÿßŸÑŸÖŸäÿ≤ÿßÿ™: ${project.features.join(' ‚Ä¢ ')}`
          : `${index + 1}. üéØ ${project.nameEn}:\n   üìã ${project.descriptionEn}\n   ‚è∞ Timeline: ${project.timelineEn}\n   üõ†Ô∏è Technologies: ${project.technologies.join(', ')}\n   ‚ú® Features: ${project.features.join(' ‚Ä¢ ')}`
      ).join('\n\n');
      
      return userLanguage === 'ar'
        ? `üíº ŸÖÿ¥ÿßÿ±ŸäÿπŸÜÿß ÿßŸÑŸÜÿßÿ¨ÿ≠ÿ© ŸàÿßŸÑŸÖŸÖŸäÿ≤ÿ©:\n\n${projectsList}\n\nüìà ${data.statistics.projectsCompleted} ŸÖÿπ ${data.statistics.successRate}\n\nŸÉŸÑ ŸÖÿ¥ÿ±Ÿàÿπ ÿ®ŸÜÿπŸÖŸÑŸá ÿ®ÿ≠ÿ® ŸàÿßŸáÿ™ŸÖÿßŸÖ ÿπÿ¥ÿßŸÜ ŸÜÿ∂ŸÖŸÜ ŸÜÿ¨ÿßÿ≠ŸÉ! üåü ÿπÿßŸäÿ≤ ÿ™ÿ¥ŸàŸÅ ŸÖÿ¥ÿßÿ±Ÿäÿπ ÿ£ŸÉÿ™ÿ±ÿü ÿ£Ÿà ÿπÿßŸäÿ≤ ŸÜÿ®ÿØÿ£ ŸÖÿ¥ÿ±ŸàÿπŸÉÿü`
        : `üíº Our Successful and Distinguished Projects:\n\n${projectsList}\n\nüìà ${data.statistics.projectsCompletedEn} with ${data.statistics.successRateEn}\n\nEvery project we create with love and attention to ensure your success! üåü Want to see more projects? Or want to start your project?`;
    }

    // Training and courses
    if (lowerQuery.includes('training') || lowerQuery.includes('ÿ™ÿØÿ±Ÿäÿ®') || lowerQuery.includes('course') ||
        lowerQuery.includes('ÿØŸàÿ±ÿ©') || lowerQuery.includes('ÿØŸàÿ±ÿßÿ™') || lowerQuery.includes('learning') ||
        lowerQuery.includes('ÿ™ÿπŸÑŸÖ') || lowerQuery.includes('education') || lowerQuery.includes('ÿ™ÿπŸÑŸäŸÖ')) {
      const courses = data.training.courses;
      const coursesList = courses.map((course, index) =>
        userLanguage === 'ar'
          ? `${index + 1}. üìö ${course.name}:\n   ‚è∞ ÿßŸÑŸÖÿØÿ©: ${course.duration}\n   üí∞ ÿßŸÑÿ≥ÿπÿ±: ${course.price}\n   üìä ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ: ${course.level}`
          : `${index + 1}. üìö ${course.nameEn}:\n   ‚è∞ Duration: ${course.durationEn}\n   üí∞ Price: ${course.priceEn}\n   üìä Level: ${course.levelEn}`
      ).join('\n\n');
      
      return userLanguage === 'ar'
        ? `üéì ÿØŸàÿ±ÿßÿ™ŸÜÿß ÿßŸÑÿ™ÿØÿ±Ÿäÿ®Ÿäÿ© ÿßŸÑŸÖÿ™ÿÆÿµÿµÿ©:\n\n${coursesList}\n\nüèÜ ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:\n${data.training.certifications.map(cert => `‚Ä¢ ${cert}`).join('\n')}\n\nüíº ŸÖÿπ ÿ•ŸäŸÅÿßÿå ÿßŸÑÿ™ÿπŸÑŸÖ ŸÖÿ¥ ŸÖÿ¨ÿ±ÿØ ŸÖÿπŸÑŸàŸÖÿßÿ™ÿå ÿØŸá ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± ŸÅŸä ŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸÉ ÿßŸÑŸÖŸáŸÜŸä! ÿπÿßŸäÿ≤ ÿ™ÿπÿ±ŸÅ ÿ£ŸÉÿ™ÿ± ÿπŸÜ ÿØŸàÿ±ÿ© ŸÖÿπŸäŸÜÿ©ÿü`
        : `üéì Our Specialized Training Courses:\n\n${coursesList}\n\nüèÜ Available Certifications:\n${data.training.certificationsEn.map(cert => `‚Ä¢ ${cert}`).join('\n')}\n\nüíº With Eva, learning isn't just information, it's an investment in your professional future! Want to know more about a specific course?`;
    }

    // Contact information - enhanced
    if (lowerQuery.includes('contact') || lowerQuery.includes('ÿ™ŸàÿßÿµŸÑ') || lowerQuery.includes('ÿ±ŸÇŸÖ') || 
        lowerQuery.includes('ÿßŸäŸÖŸäŸÑ') || lowerQuery.includes('email') || lowerQuery.includes('phone') ||
        lowerQuery.includes('address') || lowerQuery.includes('ÿπŸÜŸàÿßŸÜ') || lowerQuery.includes('location') ||
        lowerQuery.includes('ŸÖŸàŸÇÿπ') || lowerQuery.includes('ÿßÿ™ÿµÿßŸÑ') || lowerQuery.includes('call')) {
      return userLanguage === 'ar'
        ? `üìû ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿßŸÑŸÉÿßŸÖŸÑÿ©:\n\nüè¢ ÿßŸÑŸÖŸÇÿ± ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä:\nüìç ${data.contact.address}\n\nüì± ÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ:\n‚Ä¢ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä: ${data.contact.phone}\n\nüìß ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä:\n‚Ä¢ ÿßŸÑÿ•ŸäŸÖŸäŸÑ ÿßŸÑÿπÿßŸÖ: ${data.contact.email}\n‚Ä¢ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä: ${data.contact.supportEmail}\n‚Ä¢ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™: ${data.contact.salesEmail}\n\nüåê ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä: ${data.contact.website}\n\nüïí ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿπŸÖŸÑ: ${data.contact.workingHours}\n\nüè¢ ŸÅÿ±ŸàÿπŸÜÿß ÿßŸÑÿ£ÿÆÿ±Ÿâ:\n${data.company.branches.map(branch => `‚Ä¢ ${branch}`).join('\n')}\n\nüí¨ ÿ•ÿ≠ŸÜÿß ÿØÿßŸäŸÖÿßŸã ŸÖÿ≥ÿ™ÿπÿØŸäŸÜ ŸÜÿ≥ÿßÿπÿØŸÉ! ÿßÿ™ÿµŸÑ ÿ®ŸäŸÜÿß ŸÅŸä ÿ£Ÿä ŸàŸÇÿ™! ü§ù`
        : `üìû Complete Contact Information:\n\nüè¢ Headquarters:\nüìç ${data.contact.addressEn}\n\nüì± Contact Numbers:\n‚Ä¢ Main Phone: ${data.contact.phone}\n\nüìß Email Addresses:\n‚Ä¢ General Email: ${data.contact.email}\n‚Ä¢ Technical Support: ${data.contact.supportEmail}\n‚Ä¢ Sales: ${data.contact.salesEmail}\n\nüåê Website: ${data.contact.website}\n\nüïí Working Hours: ${data.contact.workingHoursEn}\n\nüè¢ Other Branches:\n${data.company.branchesEn.map(branch => `‚Ä¢ ${branch}`).join('\n')}\n\nüí¨ We're always ready to help! Contact us anytime! ü§ù`;
    }

    // Pricing - comprehensive
    if (lowerQuery.includes('price') || lowerQuery.includes('cost') || lowerQuery.includes('ÿ≥ÿπÿ±') || 
        lowerQuery.includes('ÿ™ŸÉŸÑŸÅÿ©') || lowerQuery.includes('ŸÅŸÑŸàÿ≥') || lowerQuery.includes('budget') ||
        lowerQuery.includes('quote') || lowerQuery.includes('ÿπÿ±ÿ∂ ÿ≥ÿπÿ±') || lowerQuery.includes('ŸÖŸäÿ≤ÿßŸÜŸäÿ©')) {
      return userLanguage === 'ar'
        ? `üí∞ ÿ£ÿ≥ÿπÿßÿ±ŸÜÿß ÿßŸÑÿ™ŸÜÿßŸÅÿ≥Ÿäÿ© ŸàÿßŸÑŸÖÿ±ŸÜÿ©:\n\nüèóÔ∏è ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©:\n‚Ä¢ ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™: ${data.services.softwareDevelopment.pricing}\n‚Ä¢ ŸÜÿ∏ÿßŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°: ${data.products.evaCRM.pricing}\n\nüìö ÿßŸÑÿØŸàÿ±ÿßÿ™ ÿßŸÑÿ™ÿØÿ±Ÿäÿ®Ÿäÿ©:\n${data.training.courses.map(course => `‚Ä¢ ${course.name}: ${course.price}`).join('\n')}\n\n‚≠ê ÿßŸÑÿπŸàÿßŸÖŸÑ ÿßŸÑŸÖÿ§ÿ´ÿ±ÿ© ÿπŸÑŸâ ÿßŸÑÿ≥ÿπÿ±:\n‚Ä¢ ÿ™ÿπŸÇŸäÿØ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ ŸàÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©\n‚Ä¢ ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©\n‚Ä¢ ÿßŸÑŸÖÿØÿ© ÿßŸÑÿ≤ŸÖŸÜŸäÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©\n‚Ä¢ ÿ≠ÿ¨ŸÖ ÿßŸÑŸÅÿ±ŸäŸÇ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®\n‚Ä¢ ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®\n\nüéØ ŸÖŸÖŸäÿ≤ÿßÿ™ ÿÆÿßÿµÿ©:\n‚Ä¢ ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ŸÖÿ¨ÿßŸÜŸäÿ© ÿ£ŸàŸÑŸâ\n‚Ä¢ ÿ∂ŸÖÿßŸÜ ÿßŸÑÿ¨ŸàÿØÿ©\n‚Ä¢ ÿØÿπŸÖ ŸÅŸÜŸä ŸÖÿ≥ÿ™ŸÖÿ±\n‚Ä¢ ÿ£ÿ≥ÿπÿßÿ± ŸÖÿ±ŸÜÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©\n\nüíº ÿπÿßŸäÿ≤ ÿπÿ±ÿ∂ ÿ≥ÿπÿ± ŸÖÿÆÿµŸàÿµÿü ÿßÿ≠ŸÉŸäŸÑŸä ÿπŸÜ ŸÖÿ¥ÿ±ŸàÿπŸÉ ŸàŸáÿßÿπŸÖŸÑŸÉ ÿπÿ±ÿ∂ ŸÖŸÜÿßÿ≥ÿ® ŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ™ŸÉ! ü§ù`
        : `üí∞ Our Competitive and Flexible Pricing:\n\nüèóÔ∏è Core Services:\n‚Ä¢ Software Development: ${data.services.softwareDevelopment.pricingEn}\n‚Ä¢ CRM System: ${data.products.evaCRM.pricingEn}\n\nüìö Training Courses:\n${data.training.courses.map(course => `‚Ä¢ ${course.nameEn}: ${course.priceEn}`).join('\n')}\n\n‚≠ê Factors Affecting Price:\n‚Ä¢ Project complexity and required features\n‚Ä¢ Technologies used\n‚Ä¢ Required timeline\n‚Ä¢ Team size needed\n‚Ä¢ Level of support required\n\nüéØ Special Benefits:\n‚Ä¢ Free initial consultation\n‚Ä¢ Quality guarantee\n‚Ä¢ Continuous technical support\n‚Ä¢ Flexible pricing based on budget\n\nüíº Want a custom quote? Tell me about your project and I'll create a suitable offer for your budget! ü§ù`;
    }

    // Team and careers
    if (lowerQuery.includes('team') || lowerQuery.includes('ŸÅÿ±ŸäŸÇ') || lowerQuery.includes('ŸÖŸàÿ∏ŸÅ') || 
        lowerQuery.includes('staff') || lowerQuery.includes('employees') || lowerQuery.includes('career') ||
        lowerQuery.includes('Ÿàÿ∏ŸäŸÅÿ©') || lowerQuery.includes('Ÿàÿ∏ÿßÿ¶ŸÅ') || lowerQuery.includes('job') ||
        lowerQuery.includes('work') || lowerQuery.includes('ÿ¥ÿ∫ŸÑ') || lowerQuery.includes('hiring')) {
      const positions = data.careers.openPositions;
      const positionsList = positions.map((pos, index) =>
        userLanguage === 'ar'
          ? `${index + 1}. üíº ${pos.title}\n   üìç ÿßŸÑŸÖŸÉÿßŸÜ: ${pos.location}\n   ‚è∞ ÿßŸÑŸÜŸàÿπ: ${pos.type}\n   üìä ÿßŸÑÿÆÿ®ÿ±ÿ©: ${pos.experience}`
          : `${index + 1}. üíº ${pos.titleEn}\n   üìç Location: ${pos.locationEn}\n   ‚è∞ Type: ${pos.typeEn}\n   üìä Experience: ${pos.experienceEn}`
      ).join('\n\n');
      
      return userLanguage === 'ar'
        ? `üë• ŸÅÿ±ŸäŸÇ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ™ŸÖŸäÿ≤ ŸàŸÅÿ±ÿµ ÿßŸÑÿπŸÖŸÑ:\n\nüåü ŸÅÿ±ŸäŸÇŸÜÿß ÿßŸÑÿ≠ÿßŸÑŸä:\nüë®‚Äçüíª ${data.team.departments.development}\nüé® ${data.team.departments.design}\nüìà ${data.team.departments.marketing}\nüõ†Ô∏è ${data.team.departments.support}\n\nüëî ÿßŸÑŸÇŸäÿßÿØÿ©:\n${data.team.leadership.map(leader => `‚Ä¢ ${leader.name} - ${leader.position} (${leader.experience})`).join('\n')}\n\nüíº Ÿàÿ∏ÿßÿ¶ŸÅ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäÿßŸã:\n\n${positionsList}\n\nüéÅ ŸÖÿ≤ÿßŸäÿß ÿßŸÑÿπŸÖŸÑ ŸÖÿπŸÜÿß:\n${data.careers.benefits.map(benefit => `‚Ä¢ ${benefit}`).join('\n')}\n\nüöÄ ÿ•ÿ≠ŸÜÿß ÿØÿßŸäŸÖÿßŸã ÿ®ŸÜÿØŸàÿ± ÿπŸÑŸâ ÿßŸÑŸÖŸàÿßŸáÿ® ÿßŸÑŸÖŸÖŸäÿ≤ÿ©! ÿπÿßŸäÿ≤ ÿ™ŸÜÿ∂ŸÖŸÑŸÜÿßÿü ÿßÿ®ÿπÿ™ŸÑŸÜÿß CV ÿπŸÑŸâ ${data.contact.email}`
        : `üë• Our Exceptional Team and Job Opportunities:\n\nüåü Our Current Team:\nüë®‚Äçüíª ${data.team.departments.developmentEn}\nüé® ${data.team.departments.designEn}\nüìà ${data.team.departments.marketingEn}\nüõ†Ô∏è ${data.team.departments.supportEn}\n\nüëî Leadership:\n${data.team.leadership.map(leader => `‚Ä¢ ${leader.nameEn} - ${leader.positionEn} (${leader.experienceEn})`).join('\n')}\n\nüíº Currently Available Positions:\n\n${positionsList}\n\nüéÅ Benefits of Working With Us:\n${data.careers.benefitsEn.map(benefit => `‚Ä¢ ${benefit}`).join('\n')}\n\nüöÄ We're always looking for exceptional talents! Want to join us? Send your CV to ${data.contact.email}`;
    }

    // Technologies - expanded
    if (lowerQuery.includes('technology') || lowerQuery.includes('tech') || lowerQuery.includes('ÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß') || 
        lowerQuery.includes('ÿ™ŸÇŸÜŸäÿ©') || lowerQuery.includes('ÿ®ÿ±ŸÖÿ¨ÿ©') || lowerQuery.includes('programming') ||
        lowerQuery.includes('tools') || lowerQuery.includes('ÿ£ÿØŸàÿßÿ™') || lowerQuery.includes('stack') ||
        lowerQuery.includes('framework') || lowerQuery.includes('library')) {
      return userLanguage === 'ar'
        ? `üíª ÿ™ŸÇŸÜŸäÿßÿ™ŸÜÿß ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ© Ÿàÿ£ÿØŸàÿßÿ™ŸÜÿß ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©:\n\nüé® ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàÿßÿ¨Ÿáÿßÿ™ ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©:\n${data.technologies.frontend.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\n‚öôÔ∏è ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑÿÆŸàÿßÿØŸÖ ŸàÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ™ÿ≠ÿ™Ÿäÿ©:\n${data.technologies.backend.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüì± ÿ™ÿ∑ŸàŸäÿ± ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑŸÖŸàÿ®ÿßŸäŸÑ:\n${data.technologies.mobile.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüóÑÔ∏è ÿ•ÿØÿßÿ±ÿ© ŸÇŸàÿßÿπÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™:\n${data.technologies.database.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\n‚òÅÔ∏è ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸàÿßŸÑÿßÿ≥ÿ™ÿ∂ÿßŸÅÿ©:\n${data.technologies.cloud.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüß† ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸàÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿ¢ŸÑŸä:\n${data.technologies.ai.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüîí ÿßŸÑÿ£ŸÖÿßŸÜ ŸàÿßŸÑÿßŸÖÿ™ÿ´ÿßŸÑ:\n${data.security.standards.map(std => `‚Ä¢ ${std}`).join('\n')}\n\n‚ú® ÿ•ÿ≠ŸÜÿß ŸÖÿ¥ ÿ®ŸÜÿ¨ÿ±Ÿä Ÿàÿ±ÿßÿ° ÿßŸÑŸÖŸàÿ∂ÿ©ÿå ÿ•ÿ≠ŸÜÿß ÿ®ŸÜÿÆÿ™ÿßÿ± ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÑŸä ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸÖÿ¥ÿ±ŸàÿπŸÉ! üéØ`
        : `üíª Our Advanced Technologies and Professional Tools:\n\nüé® Frontend Development:\n${data.technologies.frontend.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\n‚öôÔ∏è Backend Development and Infrastructure:\n${data.technologies.backend.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüì± Mobile App Development:\n${data.technologies.mobile.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüóÑÔ∏è Database Management:\n${data.technologies.database.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\n‚òÅÔ∏è Cloud Computing and Hosting:\n${data.technologies.cloud.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüß† Artificial Intelligence and Machine Learning:\n${data.technologies.ai.map(tech => `‚Ä¢ ${tech}`).join('\n')}\n\nüîí Security and Compliance:\n${data.security.standards.map(std => `‚Ä¢ ${std}`).join('\n')}\n\n‚ú® We don't chase trends, we choose technologies that deliver the best results for your project! üéØ`;
    }

    // Security and compliance
    if (lowerQuery.includes('security') || lowerQuery.includes('ÿ£ŸÖÿßŸÜ') || lowerQuery.includes('ÿ£ŸÖŸÜ') ||
        lowerQuery.includes('privacy') || lowerQuery.includes('ÿÆÿµŸàÿµŸäÿ©') || lowerQuery.includes('compliance') ||
        lowerQuery.includes('ÿßŸÖÿ™ÿ´ÿßŸÑ') || lowerQuery.includes('certification') || lowerQuery.includes('ÿ¥ŸáÿßÿØÿ©')) {
      return userLanguage === 'ar'
        ? `üîí ÿßŸÑÿ£ŸÖÿßŸÜ ŸàÿßŸÑÿÆÿµŸàÿµŸäÿ© - ÿ£ŸàŸÑŸàŸäÿ™ŸÜÿß ÿßŸÑŸÇÿµŸàŸâ:\n\nüõ°Ô∏è ŸÖÿπÿßŸäŸäÿ± ÿßŸÑÿ£ŸÖÿßŸÜ:\n${data.security.standards.map(std => `‚Ä¢ ${std}`).join('\n')}\n\nüîê ÿßŸÑÿ™ÿ¥ŸÅŸäÿ±: ${data.security.encryption}\nüíæ ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ©: ${data.security.backups}\nüëÅÔ∏è ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©: ${data.security.monitoring}\n‚è∞ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ: ${data.statistics.uptime}\n\nüìã ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™ ŸàÿßŸÑÿßŸÖÿ™ÿ´ÿßŸÑ:\n${data.company.certifications.map(cert => `‚Ä¢ ${cert}`).join('\n')}\n\nüåü ÿßŸÑÿ¥ÿ±ÿßŸÉÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ© ÿßŸÑÿ¢ŸÖŸÜÿ©:\n${data.partnerships.technology.map(partner => `‚Ä¢ ${partner}`).join('\n')}\n\nüõ°Ô∏è ÿ£ŸÖÿßŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ ŸÖÿ¥ ŸÖÿ¨ÿ±ÿØ ŸàÿπÿØÿå ÿØŸá ÿßŸÑÿ™ÿ≤ÿßŸÖ ŸÜÿπŸäÿ¥ ÿπŸÑŸäŸá ŸÉŸÑ ŸäŸàŸÖ! üí™`
        : `üîí Security and Privacy - Our Top Priority:\n\nüõ°Ô∏è Security Standards:\n${data.security.standards.map(std => `‚Ä¢ ${std}`).join('\n')}\n\nüîê Encryption: ${data.security.encryptionEn}\nüíæ Backups: ${data.security.backupsEn}\nüëÅÔ∏è Monitoring: ${data.security.monitoringEn}\n‚è∞ Uptime: ${data.statistics.uptimeEn}\n\nüìã Certifications and Compliance:\n${data.company.certifications.map(cert => `‚Ä¢ ${cert}`).join('\n')}\n\nüåü Secure Technology Partnerships:\n${data.partnerships.technology.map(partner => `‚Ä¢ ${partner}`).join('\n')}\n\nüõ°Ô∏è Your data security isn't just a promise, it's a commitment we live by every day! üí™`;
    }

    // If no specific match found, return a smart general response instead of null
    return userLanguage === 'ar'
      ? `ü§î ÿ≥ÿ§ÿßŸÑ ŸÖÿ´Ÿäÿ± ŸÑŸÑÿßŸáÿ™ŸÖÿßŸÖ! ÿ±ÿ∫ŸÖ ÿ•ŸÜ ŸÖÿ¥ ŸÑŸÇŸäÿ™ ÿ•ÿ¨ÿßÿ®ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÅŸä ÿ®ŸäÿßŸÜÿßÿ™Ÿäÿå ŸÑŸÉŸÜ ÿÆŸÑŸäŸÜŸä ÿ£ÿ≥ÿßÿπÿØŸÉ:\n\nüöÄ ÿ•ŸäŸÅÿß ÿ¥ÿ±ŸÉÿ© ÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß ÿ¥ÿßŸÖŸÑÿ© ŸÖÿ™ÿÆÿµÿµÿ© ŸÅŸä:\n‚Ä¢ ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ŸàÿßŸÑŸÖŸàÿßŸÇÿπ\n‚Ä¢ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸàÿßŸÑÿ™ÿ≠ŸàŸÑ ÿßŸÑÿ±ŸÇŸÖŸä\n‚Ä¢ ÿßŸÑÿ™ÿØÿ±Ÿäÿ® ŸàÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ©\n‚Ä¢ ÿßŸÑÿ≠ŸÑŸàŸÑ ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸàÿßŸÑÿ£ŸÖÿßŸÜ ÿßŸÑÿ±ŸÇŸÖŸä\n\nüí° ŸÑŸà ÿ≥ÿ§ÿßŸÑŸÉ ÿπŸÜ ŸÖŸàÿ∂Ÿàÿπ ÿ™ŸÇŸÜŸä ÿ£Ÿà ÿ™ÿ¨ÿßÿ±Ÿäÿå ÿ£ŸÇÿØÿ± ÿ£ÿ≥ÿßÿπÿØŸÉ ÿ®ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπÿßŸÖÿ© ŸÖŸÅŸäÿØÿ©.\n\nŸÖŸÖŸÉŸÜ ÿ™Ÿàÿ∂ÿ≠ŸÑŸä ÿ£ŸÉÿ™ÿ± ÿπŸÜ ÿßŸÑŸÑŸä ŸÖÿ≠ÿ™ÿßÿ¨Ÿáÿü ÿ£Ÿà ÿßÿ≥ÿ£ŸÑ ÿπŸÜ ÿÆÿØŸÖÿßÿ™ŸÜÿß ÿßŸÑÿ™ŸÅÿµŸäŸÑŸäÿ©! üéØ`
      : `ü§î Interesting question! While I didn't find a direct answer in my database, let me help you:\n\nüöÄ Eva is a comprehensive technology company specialized in:\n‚Ä¢ App and website development\n‚Ä¢ AI and digital transformation\n‚Ä¢ Technical training and consulting\n‚Ä¢ Cloud solutions and digital security\n\nüí° If your question is about technical or business topics, I can help with useful general information.\n\nCould you clarify more about what you need? Or ask about our detailed services! üéØ`;
  };

  // Enhanced message handling with smart mode
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const detectedLang = detectLanguage(inputValue);
    const tone = detectTone(inputValue, detectedLang);
    setDetectedTone(tone);
    setLanguage(detectedLang);

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      isUser: true,
      timestamp: new Date(),
      language: detectedLang,
      tone
    };

    setMessages(prev => [...prev, userMessage]);
    const currentQuery = inputValue;
    setInputValue('');
    setIsLoading(true);

    try {
      let response: string;
      let source: 'eva' | 'groq' = 'eva';

      switch (conversationMode) {
        case 'eva-only':
          response = searchEvaData(currentQuery, detectedLang) || 
            (detectedLang === 'ar' 
              ? 'ÿπÿ∞ÿ±ÿßŸãÿå ŸÑÿß ÿ£ŸÖŸÑŸÉ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿπŸÜ Ÿáÿ∞ÿß ÿßŸÑŸÖŸàÿ∂Ÿàÿπ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸäŸÅÿß. ÿ¨ÿ±ÿ® ÿ™ÿ≥ÿ£ŸÑ ÿπŸÜ ÿÆÿØŸÖÿßÿ™ŸÜÿß ÿ£Ÿà ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ©!'
              : 'Sorry, I don\'t have information about this topic in Eva\'s database. Try asking about our services or company information!');
          break;
          
        case 'ai-only':
          source = 'groq';
          const context = groqService.extractContext(currentQuery, EVA_COMPANY_DATA);
          response = await groqService.generateResponse(currentQuery, detectedLang, tone, context);
          break;
          
        default: // smart mode
          response = searchEvaData(currentQuery, detectedLang);
          // Since searchEvaData never returns null now, we have response
          // But check if it's the generic fallback response, then enhance with Groq
          if (response.includes('ŸÖÿ´Ÿäÿ± ŸÑŸÑÿßŸáÿ™ŸÖÿßŸÖ') || response.includes('Interesting question')) {
            source = 'groq';
            const context = groqService.extractContext(currentQuery, EVA_COMPANY_DATA);
            const groqResponse = await groqService.generateResponse(currentQuery, detectedLang, tone, context);
            // Combine Eva's general info with Groq's specific answer
            response = groqResponse;
          }
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response,
        isUser: false,
        timestamp: new Date(),
        language: detectedLang,
        tone,
        source
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error in handleSendMessage:', error);
      // Provide intelligent response even if Groq fails
      const evaResponse = searchEvaData(currentQuery, detectedLang);
      const smartResponses = CONVERSATION_DATABASE.smartResponses[detectedLang];
      const randomResponse = smartResponses.general[Math.floor(Math.random() * smartResponses.general.length)];
      
      const fallbackResponse = detectedLang === 'ar'
        ? evaResponse || `${randomResponse}\n\nü§ñ ${CONVERSATION_DATABASE.fallbackSystem.ar.beforeAI}\n\nŸÑŸÉŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ŸäŸÅÿß ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÖÿ™ŸàŸÅÿ±ÿ© ÿØÿßÿ¶ŸÖÿßŸã:\n‚Ä¢ ÿÆÿØŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°: 17125\n‚Ä¢ ÿßŸÑÿ•ŸäŸÖŸäŸÑ: info@eva-cosmetics.com\n‚Ä¢ ÿßŸÑŸÖÿ™ÿ¨ÿ±: shop@eva-cosmetics.com\n\nüíº ÿ•ŸäŸá ÿßŸÑŸÑŸä ÿ™ÿ≠ÿ® ÿ™ÿπÿ±ŸÅŸá ÿπŸÜ ÿ•ŸäŸÅÿßÿü`
        : evaResponse || `${randomResponse}\n\nü§ñ ${CONVERSATION_DATABASE.fallbackSystem.en.beforeAI}\n\nBut Eva's essential information is always available:\n‚Ä¢ Customer Service: 17125\n‚Ä¢ Email: info@eva-cosmetics.com\n‚Ä¢ Store: shop@eva-cosmetics.com\n\nüíº What would you like to know about Eva?`;
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: fallbackResponse,
        isUser: false,
        timestamp: new Date(),
        language: detectedLang,
        tone,
        source: 'eva'
      };

      setMessages(prev => [...prev, botMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Copy message to clipboard
  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: language === 'ar' ? 'ÿ™ŸÖ ÿßŸÑŸÜÿ≥ÿÆ' : 'Copied',
      description: language === 'ar' ? 'ÿ™ŸÖ ŸÜÿ≥ÿÆ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©' : 'Message copied to clipboard'
    });
  };

  // Export conversation
  const exportConversation = () => {
    const conversation = messages.map(msg => 
      `${msg.isUser ? (language === 'ar' ? 'ÿ£ŸÜÿ™' : 'You') : 'Eva'} (${msg.timestamp.toLocaleString()}): ${msg.content}`
    ).join('\n\n');
    
    const blob = new Blob([conversation], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `eva-conversation-${new Date().getTime()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: language === 'ar' ? 'ÿ™ŸÖ ÿßŸÑÿ™ÿµÿØŸäÿ±' : 'Exported',
      description: language === 'ar' ? 'ÿ™ŸÖ ÿ™ÿµÿØŸäÿ± ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿ®ŸÜÿ¨ÿßÿ≠' : 'Conversation exported successfully'
    });
  };

  // Clear conversation
  const clearConversation = () => {
    setMessages([]);
    setTimeout(() => {
      const welcomeMessage: Message = {
        id: '1',
        content: language === 'ar' 
          ? 'ÿ™ŸÖ ŸÖÿ≥ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©! üîÑ ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü'
          : 'Conversation cleared! üîÑ How can I help you today?',
        isUser: false,
        timestamp: new Date(),
        language,
        tone: detectedTone,
        source: 'eva'
      };
      setMessages([welcomeMessage]);
    }, 100);
  };

  // Speech recognition (placeholder)
  const toggleSpeechRecognition = () => {
    setIsListening(!isListening);
    toast({
      title: language === 'ar' ? 'ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿµŸàÿ™' : 'Speech Recognition',
      description: language === 'ar' ? 'ÿ≥Ÿäÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸäÿ≤ÿ© ŸÇÿ±Ÿäÿ®ÿßŸã' : 'This feature will be activated soon'
    });
  };

  // Text to speech (placeholder)
  const toggleTextToSpeech = () => {
    setIsSpeaking(!isSpeaking);
    toast({
      title: language === 'ar' ? 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿ•ŸÑŸâ ÿµŸàÿ™' : 'Text to Speech',
      description: language === 'ar' ? 'ÿ≥Ÿäÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸäÿ≤ÿ© ŸÇÿ±Ÿäÿ®ÿßŸã' : 'This feature will be activated soon'
    });
  };

  return (
    <div className="min-h-screen bg-chat-bg text-text-primary">
      {/* Header */}
      <div className="bg-chat-surface border-b border-chat-border p-4 sticky top-0 z-10">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full overflow-hidden shadow-lg ring-2 ring-eva-primary/30">
              <img src={evaLogo} alt="Eva Logo" className="w-full h-full object-cover" />
            </div>
            <div>
              <h1 className="text-xl font-bold bg-gradient-to-r from-eva-primary to-eva-secondary bg-clip-text text-transparent">
                {language === 'ar' ? 'ŸÖÿ≥ÿßÿπÿØ ÿ•ŸäŸÅÿß ÿßŸÑÿ∞ŸÉŸä' : 'Eva Smart Assistant'}
              </h1>
              <p className="text-sm text-text-secondary">
                {language === 'ar' ? 'ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ¥ÿÆÿµŸä ŸÅŸä ÿ¥ÿ±ŸÉÿ© ÿ•ŸäŸÅÿß' : 'Your personal assistant at Eva Company'}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2 flex-wrap">
            <Badge variant={detectedTone === 'formal' ? 'default' : 'secondary'} className="animate-pulse">
              {language === 'ar' 
                ? (detectedTone === 'formal' ? 'ÿ±ÿ≥ŸÖŸä' : 'ŸàÿØŸàÿØ') 
                : (detectedTone === 'formal' ? 'Formal' : 'Friendly')
              }
            </Badge>
            
            <Select value={conversationMode} onValueChange={(value: 'smart' | 'eva-only' | 'ai-only') => setConversationMode(value)}>
              <SelectTrigger className="w-32 h-8 text-xs bg-chat-card border-chat-border">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="smart">{language === 'ar' ? 'ÿ∞ŸÉŸä' : 'Smart'}</SelectItem>
                <SelectItem value="eva-only">{language === 'ar' ? 'ÿ•ŸäŸÅÿß ŸÅŸÇÿ∑' : 'Eva Only'}</SelectItem>
                <SelectItem value="ai-only">{language === 'ar' ? 'ÿ∞ŸÉÿßÿ° ÿßÿµÿ∑ŸÜÿßÿπŸä' : 'AI Only'}</SelectItem>
              </SelectContent>
            </Select>

            <Button
              variant="ghost"
              size="sm"
              onClick={exportConversation}
              className="text-text-secondary hover:text-eva-accent transition-colors"
              title={language === 'ar' ? 'ÿ™ÿµÿØŸäÿ± ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©' : 'Export Conversation'}
            >
              <Download className="w-4 h-4" />
            </Button>

            <Button
              variant="ghost"
              size="sm"
              onClick={clearConversation}
              className="text-text-secondary hover:text-destructive transition-colors"
              title={language === 'ar' ? 'ŸÖÿ≥ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©' : 'Clear Conversation'}
            >
              <RefreshCw className="w-4 h-4" />
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLanguage(language === 'ar' ? 'en' : 'ar')}
              className="text-text-secondary hover:text-eva-accent transition-colors"
            >
              <Globe className="w-4 h-4 mr-1" />
              {language === 'ar' ? 'EN' : 'ÿπÿ±'}
            </Button>
          </div>
        </div>
      </div>

      {/* Chat Messages */}
      <div className="max-w-4xl mx-auto p-4 h-[calc(100vh-200px)] overflow-y-auto">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <Card className={`max-w-[80%] p-4 group hover:shadow-lg transition-all duration-200 ${
                message.isUser 
                  ? 'bg-gradient-to-br from-eva-primary to-eva-primary-dark text-white border-eva-primary/20' 
                  : 'bg-chat-bot border-chat-border hover:border-eva-accent/30'
              }`}>
                <div className="flex items-start gap-3">
                  {!message.isUser && (
                    <div className="w-6 h-6 bg-gradient-to-br from-eva-primary to-eva-secondary rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                  )}
                  {message.isUser && (
                    <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                      <User className="w-4 h-4 text-white" />
                    </div>
                  )}
                  <div className="flex-1 min-w-0">
                    <p className="whitespace-pre-wrap leading-relaxed break-words">
                      {message.content}
                    </p>
                    <div className="flex items-center justify-between mt-3 text-xs opacity-70">
                      <div className="flex items-center gap-2">
                        <span>
                          {message.timestamp.toLocaleTimeString(
                            message.language === 'ar' ? 'ar-EG' : 'en-US'
                          )}
                        </span>
                        {message.source && (
                          <Badge variant="outline" className="text-xs border-current">
                            {message.source === 'eva' ? 
                              (language === 'ar' ? 'ÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸäŸÅÿß' : 'Eva Data') : 
                              (language === 'ar' ? 'ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä' : 'AI Assistant')
                            }
                          </Badge>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyMessage(message.content)}
                        className="opacity-0 group-hover:opacity-100 h-6 w-6 p-0 hover:bg-white/10 transition-all"
                        title={language === 'ar' ? 'ŸÜÿ≥ÿÆ' : 'Copy'}
                      >
                        <Copy className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex justify-start">
              <Card className="bg-chat-bot border-chat-border p-4">
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 bg-gradient-to-br from-eva-primary to-eva-secondary rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-eva-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-eva-primary rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-eva-primary rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                  <span className="text-sm text-text-muted">
                    {language === 'ar' ? 'ÿ¨ÿßÿ±Ÿç ÿßŸÑŸÉÿ™ÿßÿ®ÿ©...' : 'Typing...'}
                  </span>
                </div>
              </Card>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <div className="fixed bottom-0 left-0 right-0 bg-chat-surface/95 backdrop-blur-sm border-t border-chat-border p-4">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleSpeechRecognition}
              className={`text-text-secondary hover:text-eva-accent transition-colors ${isListening ? 'text-eva-accent animate-pulse' : ''}`}
              title={language === 'ar' ? 'ÿßŸÑÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿµŸàÿ™' : 'Speech Recognition'}
            >
              {isListening ? <Mic className="w-4 h-4" /> : <MicOff className="w-4 h-4" />}
            </Button>
            
            <div className="flex-1 relative">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
                placeholder={
                  language === 'ar'
                    ? 'ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ŸáŸÜÿß... ŸÖÿ´ÿßŸÑ: "ÿ•ŸäŸá ÿÆÿØŸÖÿßÿ™ŸÉŸÖÿü" ÿ£Ÿà "How much does development cost?"'
                    : 'Type your message here... Example: "What are your services?" or "ŸÉÿßŸÖ ÿ≥ÿπÿ± ÿßŸÑÿ™ÿ∑ŸàŸäÿ±ÿü"'
                }
                className="bg-chat-card border-chat-border text-text-primary placeholder:text-text-muted pr-14 pl-4 py-3 rounded-xl focus:ring-2 focus:ring-eva-primary/50 focus:border-eva-primary transition-all"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={isLoading || !inputValue.trim()}
                size="sm"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-eva-primary to-eva-secondary hover:from-eva-primary-dark hover:to-eva-primary shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleTextToSpeech}
              className={`text-text-secondary hover:text-eva-accent transition-colors ${isSpeaking ? 'text-eva-accent animate-pulse' : ''}`}
              title={language === 'ar' ? 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿ•ŸÑŸâ ÿµŸàÿ™' : 'Text to Speech'}
            >
              {isSpeaking ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
            </Button>
          </div>
          
          <div className="text-center mt-3">
            <p className="text-xs text-text-muted">
              {language === 'ar'
                ? 'ü§ñ ŸÖÿØÿπŸàŸÖ ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÖŸÜ ÿ•ŸäŸÅÿß ‚Ä¢ ŸäÿØÿπŸÖ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸàÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© ‚Ä¢ ÿ∞ŸÉŸä ŸÅŸä ÿßŸÉÿ™ÿ¥ÿßŸÅ ŸÜÿ®ÿ±ÿ© ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©'
                : 'ü§ñ Powered by Eva AI ‚Ä¢ Supports Arabic & English ‚Ä¢ Smart tone detection'
              }
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EvaChatbot;